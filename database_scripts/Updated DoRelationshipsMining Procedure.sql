DROP procedure IF EXISTS `doRelationshipMining`;

DELIMITER $$
USE `colfusion`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `doRelationshipMining`(IN param1 varchar(200))
    READS SQL DATA
BEGIN
	SET @currTime := CURRENT_TIMESTAMP;
	SET @user := 27;

	drop temporary table if exists temporaryRelationshipsTable;

	CREATE TEMPORARY TABLE temporaryRelationshipsTable
	select * 
	from (
			select distinct newDataset.sid as sid1, CONCAT('cid(', newDataset.cid, ')') as cl1, newDataset.tableName as tableName1, 
					theRest.sid as sid2, CONCAT('cid(', theRest.cid, ')') as cl2, theRest.tableName as tableName2, 
					'autogenerated' as name, 'based on complete match in dnames' as description, @user as creator, @currTime as creation_time
			
			from 
				(SELECT sid, colfusion_dnameinfo.cid, tableName, dname_chosen as nd_newDname, dname_original_name as nd_originalDname 
				FROM colfusion_dnameinfo, colfusion_columnTableInfo
				where sid = param1
				and colfusion_dnameinfo.cid = colfusion_columnTableInfo.cid
				and dname_chosen not in ('Spd', 'Drd','Start','End', 'Location', 'Aggrtype')) as newDataset,

				(SELECT colfusion_dnameinfo.sid, colfusion_dnameinfo.cid, tableName, dname_chosen as newDname, dname_original_name as original_name 
				FROM colfusion_dnameinfo, colfusion_columnTableInfo, colfusion_sourceinfo
				where colfusion_dnameinfo.sid <> param1 
				and colfusion_dnameinfo.sid = colfusion_sourceinfo.sid and colfusion_sourceinfo.Status = 'queued'
				and colfusion_dnameinfo.cid = colfusion_columnTableInfo.cid
				and dname_chosen not in ('Spd', 'Drd','Start','End', 'Location', 'Aggrtype')) as theRest

			where (newDataset.nd_newDname = theRest.newDname or newDataset.nd_newDname = theRest.original_name)
			   or (newDataset.nd_originalDname = theRest.newDname or newDataset.nd_originalDname = theRest.original_name)
		) as t
	where not exists (select *
						from colfusion_relationships natural join colfusion_relationships_columns 
						where (t.sid1 = sid1 and t.sid2 = sid2 and t.cl1 = cl_from and t.cl2 = cl_to) or
								(t.sid1 = sid2 and t.sid2 = sid1 and t.cl1 = cl_to and t.cl2 = cl_from)
					 )
	;

	insert ignore into colfusion_relationships(name, description, creator, creation_time, sid1, sid2, tableName1, tableName2, status) 
	select name, description, creator, creation_time, sid1, sid2,tableName1, tableName2, 2 
	from
	(
	select distinct sid1, sid2, tableName1, tableName2, name,  description, creator, creation_time
	from temporaryRelationshipsTable) as t;


	insert ignore into colfusion_relationships_columns(rel_id, cl_from, cl_to) 
	select rel_id, cl1, cl2
	from colfusion_relationships natural join temporaryRelationshipsTable;


	insert ignore into colfusion_user_relationship_verdict 
	select rel_id, creator, 1, 'complete match in dnames', @currTime 
	from colfusion_relationships natural join temporaryRelationshipsTable;

	drop temporary table if exists temporaryRelationshipsTable;

END$$

DELIMITER ;

